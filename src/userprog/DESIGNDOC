            +---------------------------+
            |          CS 212           |
            | PROJECT 3: VIRTUAL MEMORY |
            |      DESIGN DOCUMENT      |
            +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct swap_table
{
    struct lock swap_table_lock;
    struct block *swap_block;
    uint32_t *swap_slots;
    uint32_t swap_slots_number;
    uint32_t max_swap_slots_number_per_page;
    uint32_t swap_slot_current;
};

swap_table_lock: lock for swap table
swap_block: block device for swap
swap_slots: array for swap slots
swap_slots_number: number of swap slots
max_swap_slots_number_per_page: maximum number of swap slots per page
swap_slot_current: current swap slot

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We use clock algorithm to choose a frame to evict. We move the clock
hand before the loop to move from the previously evicted frame. This
won't cause any problem because we use a loop to scan the frame table
and we will eventually find a frame.

We acquire the frame_table_lock to prevent other processes from
accessing the frame table. Then we iterate through the frame table
and try to acquire the frame_lock of the frame that the clock hand
points to. If we fail to acquire the lock, we move the clock hand.
If we succeed to acquire the lock, we then acquire the page_lock of
the pagedir_lock of the owner_thread of the frame because we need to
access the pagedir of the owner_thread.

After acquiring the locks, we check the accessed bit of the frame.
If the accessed bit is 1, we set the accessed bit to 0 and move the
clock hand. If the accessed bit is 0, we evict the frame. After
evicting the frame, we release the locks and return the cleaned
frame.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

For the frame that is swapped in, we update the spte of the frame
to the new page that just swapped in and set in_physical_memory
field to true. Also we update the fid (frame index in frame table)
of the spte to the frame that is swapped in. For the page frame
that is swapped out, we set the spte of the frame to NULL and set
in_physical_memory field to false.

Then we call clear_page_copy and install_page_copy to rebuild the
mapping from virtual address to physical frame is correct.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We need to check the user program's stack pointer esp follwing:
1. For PUSH, the faulting address is esp - 4.
2. For PUSHA, the faulting address is esp - 32.
3. For SUB $n, %esp; MOV ..., m(%esp), the faulting address is greater
than esp.
4. The faulting address is within the stack limit, which is greater
than 8 * 1024 * 1024 and less than esp.

If above conditions are met, we extend the stack heuristically and
call stack_growth.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

Deadlock conditions from synchronization 2:

1. Limited access (mutual exclusion).
2. No preemption.
3. Multiple independent requests.
4. Circularity in graph of requests.

For our design, mutual exclusion is unavoidable because we must
limit the access to the frame table and many other data structures.
But we try to split the limited access part by adding a spte pointer
to each frame table entry, so that we can avoid using another global
table. If we use a global spte table, it would be more difficult to
avoid deadlock.

For preemption, we should allow process to preempt physical frames
in our virtual memory system. Thus this naturally helps us to avoid 
deadlock.

For independent requests, since we have multiple shared data and
various locks, this condition is possible to happen, also the same
for circularity. To solve this, we use hierarchical locks to avoid
deadlock. We have:

1. frame_table_lock for global frame table.
2. frame_lock for each internal frame.
3. page_lock for each internal spte.
4. pagedir_lock for each thread's pagedir.
5. swap_table_lock for global swap table.
6. supplementary_page_table_lock for spte list of each thread.
7. file_system_lock for global file system.

If we only use a single lock, we will not have a deadlock but only
one process can proceed at a time. Thus we use hierarchical locks.
As long as there are no cycles in the graph of locks, we can avoid
deadlock. When we need to acquire multiple locks, we acquire them
and release them in reverse order. Also, the locks are used in
different hierarchical levels, so we can avoid deadlock.

We always use the locks to protect its corresponding data structure.
For example, we always use file_system_lock for file system access
and resource allocation and release. And we always use pagedir_lock
when we call functions like pagedir_set. Also 
supplementary_page_table_lock is used when we access the spte list,
and swap_table_lock is for accessing the swap table. For ordering,
we always use frame_lock inside page_lock because in our design,
we generally need to access the spte pointer to get the frame id,
and then get the frame from the frame table.
Also, we usually use file_system_lock and frame_table_lock 
at the outtermost level.


>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

We use page_lock in spte to make sure that a page cannot be evicted
while it is being accessed. Also, we call clear_page_copy before
evicting a frame. So if other process Q tries to access the page
it would cause a page fault and we can handle it gracefully. The
page fault handler would call install_page_copy to rebuild the
mapping from virtual address to physical frame afterward, and it
also waits for the page_lock before doing so, which ensures that
Q cannot access the page during the eviction process.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

We use frame_lock in frame table to ensure this. We always acquire
the frame_lock before accessing the frame table. In eviction, process
Q would lock_try_acquire the frame_lock first and if not success, it
would move on to the next frame. Thus, it is impossible for process
Q to interfere with thre frame.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We upgrade the validation functions in syscall. If the pointer is valid,
and is in physical memory, we just pin the pages and do the syscall
because we need to lock acquire the global file_system_lock to access
the file system. Thus, we make sure that the page fault wouldn't happen
during file system calls.

If the pointer is valid, but is not in physical memory, we would
allocate new frame and may grow the stack, and then pin the pages
and do the syscall.

If the pointer is invalid, this is a bad pointer and we handle it
like what we did in lab2 user program.

After the syscall, we unpin the pages.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We use many locks. Because we have many shared data structures and
it's not difficult to add an internal lock for each data structure.
Also, we want to have parallelism. We think that using a single
lock in the whole VM system is not a good idea because it is
counter intuitive.

We add a lock for each frame in frame table and for each spte in
supplementary page table, and the purpose is illustrated in previous
questions. Also, most of our locks are fine grained and are used
to protect the corresponding data structure, which may help us to
avoid deadlock.

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
