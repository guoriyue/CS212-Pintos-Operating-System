            +--------------------+
            |        CS 212      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Mingfei Guo <mfguo@stanford.edu>
Caterina Zampa <cate02@stanford.edu>
Huan Chen <hchen130@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

int64_t time_wakeup;
- This variable is defined in thread.h and is specific for each thread.
It identifies the moment in time at which the thread is supposed to 
wake up after being called timer_sleep on. 

struct semaphore *sema;  	
- This variable is defined in thread.h and is specific for each thread. 
It enables the interrupt handler to signal the thread when it is time 
for it to wake up.

static struct list blocked_list;
- This global list is defined in timer.c and stores all the threads 
that are currently sleeping (after a call to timer_sleep). The timer 
interrupt regularly loops over it to check which threads need to be 
woken up. 

struct list_elem elem_sleep;
- This variable is defined in thread.h and is specific for each 
thread. It is a struct list_elem specific for the blocked_list list. 

bool less_wakeup_time_fun (const struct list_elem *a, const struct 
    list_elem *b, void *aux);
- This function is used to sort the list_elem structs for the 
blocked_list, according to their wake up time (the ones with the 
smallest wake up time are at the front). 

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
After a call to timer_sleep(), we create a semaphore for the 
current thread, set it to down, set the wake up time for the 
current thread and add it to blocked_list. Then, at every 
interrupt, the interrupt handler will parse through blocked_list,
check whether there are any threads to be woken up, and if there 
are, call sema_up on their semaphore, which will unblock them.
We then remove them from blocked_list. 


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
We keep blocked_list sorted, so that at every interrupt, the 
interrupt handler doesn't have to parse through the entire list, 
but can break as soon as it runs into a thread whose wake up time 
is greater than the current time. 

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
Since we are working on a single core chip, we know that by 
disabling interrupts we can be sure that only one thread is 
running. Therefore, within timer_sleep() we disable interrupts when
we add elements to blocked_list (since it is a global shared
variable among all threads). 

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
Since we are disabling interrupts in timer_sleep(), a timer interrupt 
cannot occur. This is therefore not a problem. 

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
Other designs we considered were manually calling thread_block on the 
current thread within timer_sleep. However, this didn't work, because 
it did not allow for communication between the threads and the 
interrupt handler. We also considered condition variables, but that 
implementation would also have been more inefficient, because it involves
creating locks, unlike semaphores. Semaphores ended up being the most
efficient solution, as it is a very simple and straightforward way 
of blocking a thread for a certain amount of time (i.e. until it receives
the signal to wake up), which is exactly what was required for this function. 

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

int nice;
- This variable is defined in thread.h and is specific for each thread. 
It stores the nice value for the thread. 

int recent_cpu;
- This variable is defined in thread.h and is specific for each thread. 
It stores the recent_cpu value for the thread. 

void compute_advanced_parameters (int64_t ticks);
- This function is defined in thread.c, and is called by the interrupt 
handler. It updates the value of recent_cpu for the threads, the 
gobal variable load_avg, and the priority for all threads whose
recent_cpu value has changed. 

static size_t ready_threads;
- This global variable is defined in thread.c and stores the number 
of ready threads (threads in the ready_list plus the current thread). 
This value is used to compute the value of load_avg. 

static int load_avg;
- This global variable is defined in thread.c and stored the laod_avg
value. It is updated every second and is used to compute the value
of recent_cpu for the individual threads. 

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
