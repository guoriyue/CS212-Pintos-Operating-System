Copying tests/filesys/extended/syn-rw to scratch partition...
Copying tests/filesys/extended/tar to scratch partition...
Copying tests/filesys/extended/child-syn-rw to scratch partition...
qemu-system-i386 -device isa-debug-exit -drive file=/tmp/yUCn6ZJK_R.dsk,format=raw,index=0,media=disk -drive file=tmp.dsk,format=raw,index=1,media=disk -m 4 -net none -nographic -monitor null
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  334,233,600 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  329,318,400 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  328,089,600 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  327,680,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  328,089,600 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  341,606,400 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  328,499,200 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  329,318,400 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  339,968,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  326,451,200 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  323,993,600 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  342,835,200 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  339,968,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  334,643,200 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  323,993,600 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  327,270,400 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  328,089,600 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  320,716,800 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  333,824,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  332,595,200 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  327,680,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  339,968,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  325,632,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  325,632,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  330,956,800 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  329,318,400 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  326,041,600 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  326,860,800 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  344,064,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  333,824,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  329,728,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  326,860,800 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  327,680,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  325,632,000 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  328,089,600 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  320,716,800 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  328,499,200 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  323,993,600 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  326,860,800 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  329,318,400 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  326,041,600 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  340,787,200 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  326,451,200 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  326,860,800 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  326,860,800 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  329,318,400 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  328,908,800 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  334,643,200 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  343,244,800 loops/s.
hda: 9,072 sectors (4 MB), model "QM00001", serial "QEMU HARDDISK"
hda1: 202 sectors (101 kB), Pintos OS kernel (20)
hda2: 356 sectors (178 kB), Pintos scratch (22)
hda3: 8,192 sectors (4 MB), Pintos swap (23)
hdb: 5,040 sectors (2 MB), model "QM00002", serial "QEMU HARDDISK"
hdb1: 4,096 sectors (2 MB), Pintos file system (21)
filesys: using hdb1
scratch: using hda2
swap: using hda3
Formatting file system...done.
Boot complete.
Extracting ustar archive from scratch device into file system...
Putting 'syn-rw' into the file system...
Putting 'tar' into the file system...
Singly indirect block
Singly indirect block
byte to sector for singly indirect block
Putting 'child-syn-rw' into the file system...
Kernel PANIC at ../../devices/block.c:112 in check_sector(): Access past end of device hdb1 (sector=3221465240, size=4096)

Call stack: 0xc002892f.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Kernel PANIC recursion at ../../devices/timer.c:222 in real_time_sleep().
c[?7l[2J[0mSeaBIOS (version rel-1.12.0-59-gc9ba5276e321-prebuilt.qemu.org)
Booting from Hard Disk...
PPiiLLoo  hhddaa1
1
LLooaaddiinngg.......................
Kernel command line: -q -f extract run syn-rw
Pintos booting with 3,968 kB RAM...
367 pages available in kernel pool.
367 pages available in user pool.
Calibrating timer...  327,680,000 loops/s.

TIMEOUT after 60 seconds of host CPU time
